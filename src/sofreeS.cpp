// Source Code Generated By WrapperGen - www.mirco-grams.de
// spcl.dll:  25 exports
#include <windows.h>
#include <io.h> //access
#include <winsock.h>

#include <stdio.h> //FILES
#include <stdint.h> //uint32_t;

#include "sofreeS.h"
#include "sofheader.h"

#include "crc32.h"

#include "DetourXS/detourxs.h"

void SoFree(void);
bool SoFplusLoadFn(HMODULE sofplus,void ** out_fn,char * func);

lpfn_bind sp_bind = (lpfn_bind)bind;
lpfn_closesocket sp_closesocket = (lpfn_closesocket)closesocket;
lpfn_connect sp_connect = (lpfn_connect)connect;
lpfn_getsockname sp_getsockname = (lpfn_getsockname)getsockname;
lpfn_htonl sp_htonl = (lpfn_htonl)htonl;
lpfn_htons sp_htons = (lpfn_htons)htons;
lpfn_inet_addr sp_inet_addr = (lpfn_inet_addr)inet_addr;
lpfn_inet_ntoa sp_inet_ntoa = (lpfn_inet_ntoa)inet_ntoa;
lpfn_ioctlsocket sp_ioctlsocket = (lpfn_ioctlsocket)ioctlsocket;
lpfn_ntohl sp_ntohl = (lpfn_ntohl)ntohl;
lpfn_ntohs sp_ntohs = (lpfn_ntohs)ntohs;
lpfn_recv sp_recv = (lpfn_recv)recv;
lpfn_recvfrom sp_recvfrom = (lpfn_recvfrom)recvfrom;
lpfn_select sp_select = (lpfn_select)select;
lpfn_send sp_send = (lpfn_send)send;
lpfn_sendto sp_sendto = (lpfn_sendto)sendto;
lpfn_setsockopt sp_setsockopt = (lpfn_setsockopt)setsockopt;
lpfn_shutdown sp_shutdown = (lpfn_shutdown)shutdown;
lpfn_socket sp_socket = (lpfn_socket)socket;
lpfn_gethostbyname sp_gethostbyname = (lpfn_gethostbyname)gethostbyname;
lpfn_gethostname sp_gethostname = (lpfn_gethostname)gethostname;
lpfn_WSAGetLastError sp_WSAGetLastError = (lpfn_WSAGetLastError)WSAGetLastError;
lpfn_WSAStartup sp_WSAStartup = (lpfn_WSAStartup)WSAStartup;
lpfn_WSACleanup sp_WSACleanup = (lpfn_WSACleanup)WSACleanup;
lpfn___WSAFDIsSet sp___WSAFDIsSet = (lpfn___WSAFDIsSet)__WSAFDIsSet;

int __stdcall sys_bind(SOCKET s,const struct sockaddr *name,int namelen)
{
	
	sockaddr_in * sock_in = (sockaddr_in*)name;

	return sp_bind(s,name,namelen);
}

int sys_closesocket(SOCKET s)
{

	return sp_closesocket(s);
}

int sys_connect(SOCKET s,const struct sockaddr *name,int namelen)
{
	
	sp_connect(s,name,namelen);
}

int sys_getsockname(SOCKET s, struct sockaddr *name,int *namelen)
{
	
	return sp_getsockname(s,name,namelen);
}

u_long sys_htonl(u_long hostlong)
{
	
	return sp_htonl(hostlong);
}

u_short sys_htons(u_short hostshort)
{
	
	return sp_htons(hostshort);
}

unsigned long sys_inet_addr(const char *cp)
{
	return sp_inet_addr(cp);
}

char* sys_inet_ntoa(struct in_addr in)
{

	return sp_inet_ntoa(in);;
}

int sys_ioctlsocket(SOCKET s,long cmd,u_long *argp)
{
	return sp_ioctlsocket(s,cmd,argp);
}

u_long sys_ntohl(u_long netlong)
{
	
	return sp_ntohl(netlong);
}

u_short sys_ntohs(u_short netshort)
{

	return sp_ntohs(netshort);
}

int sys_recv(SOCKET s,char *buf,int len,int flags)
{
	return sp_recv(s,buf,len,flags);
}

int sys_recvfrom(SOCKET s,char *buf,int len,int flags,struct sockaddr *from,int *fromlen)
{

	return sp_recvfrom(s,buf,len,flags,from,fromlen);
}

int sys_select(int nfds,fd_set *readfds,fd_set *writefds,fd_set *exceptfds,const struct timeval *timeout)
{
	
	return sp_select(nfds,readfds,writefds,exceptfds,timeout);
}

int sys_send(SOCKET s,const char *buf,int len,int flags)
{
	return sp_send(s,buf,len,flags);
}

int sys_sendto(SOCKET s,const char *buf,int len,int flags,const struct sockaddr *to,int tolen)
{

	return sp_sendto(s,buf,len,flags,to,tolen);
}

int sys_setsockopt(SOCKET s,int level,int optname,const char *optval,int optlen)
{

	return sp_setsockopt(s,level,optname,optval,optlen);
}

int sys_shutdown(SOCKET s,int how)
{

	return shutdown(s,how);
}

SOCKET sys_socket(int af,int type,int protocol)
{

	return sp_socket(af,type,protocol);
}

struct hostent* sys_gethostbyname(const char *name)
{

	return sp_gethostbyname(name);
}

int sys_gethostname(char *name,int namelen)
{

	return sp_gethostname(name,namelen);

}

int sys_WSAGetLastError(void)
{

	return sp_WSAGetLastError();
}

bool once_wsa = true;
int sys_WSAStartup(WORD wVersionRequested,LPWSADATA lpWSAData)
{

	if ( once_wsa == true ) {
		
		onServerInitiation();
		once_wsa = false;
	}
	
	return sp_WSAStartup(wVersionRequested,lpWSAData);
}

int sys_WSACleanup(void)
{

	return sp_WSACleanup();
}

int sys___WSAFDIsSet(SOCKET fd,fd_set *set)
{

	return sp___WSAFDIsSet(fd,set);
}
HMODULE o_sofplus = NULL;

#if 0
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
{
	if ( dwReason == DLL_PROCESS_ATTACH )
	{
		o_sofplus = LoadLibrary("spsv.dll");
		return TRUE;
	}
}
#else
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
{
	if ( dwReason == DLL_PROCESS_ATTACH )
	{
		#ifdef SOFREE_DEBUG
			
			FILE* log_file = freopen("sofreeS.log", "w", stdout);
			if (log_file == NULL) {
				// Handle error: stdout redirection failed
				// You might be in a tough spot here if stdout also failed
			} else {
				setvbuf(stdout, NULL, _IONBF, 0);
			}

			FILE* err_file = freopen("sofreeS.err", "w", stderr);
			if (err_file == NULL) {
				// Handle error: stderr redirection failed
				// You might want to print to stdout or a separate log for this error
				fprintf(stdout, "ERROR: Failed to redirect stderr to sofreeS.err\n");
			} else {
				setvbuf(stderr, NULL, _IONBF, 0);
			}
		#endif

		DisableThreadLibraryCalls(hInstance);
		static bool init = false;
		if (init==false) {
			char ac_sofplus[MAX_PATH];
			
			bool b_sofplus = false;


			strcpy(ac_sofplus,"spsv.dll");
			if( access( ac_sofplus, F_OK ) != -1 ) b_sofplus = true;
		    else {
				strcpy(ac_sofplus,"SoFplus.dll");
				if( access( ac_sofplus, F_OK ) != -1 ) b_sofplus = true;
			}
		
			if ( b_sofplus == true) {
				#ifdef SOFREE_DEBUG
				fprintf(stdout,"SoF plus detected\n");
				#endif
				o_sofplus = LoadLibrary(ac_sofplus);
				if ( o_sofplus != NULL ) {
					#ifdef SOFREE_DEBUG
					fprintf(stdout,"SoF plus loaded\n");
					#endif
					char ac_funcs[26][32] = {"bind","closesocket","connect","getsockname","htonl","htons","inet_addr","inet_ntoa","ioctlsocket","ntohl","ntohs","recv","recvfrom","select","send","sendto","bind","setsockopt","shutdown","socket","gethostbyname","gethostname","WSAGetLastError","WSAStartup","WSACleanup","__WSAFDIsSet"};
					void **pv_funcs[26] = {(void**)&sp_bind,(void**)&sp_closesocket,(void**)&sp_connect,(void**)&sp_getsockname,(void**)&sp_htonl,(void**)&sp_htons,(void**)&sp_inet_addr,(void**)&sp_inet_ntoa,(void**)&sp_ioctlsocket,(void**)&sp_ntohl,(void**)&sp_ntohs,(void**)&sp_recv,(void**)&sp_recvfrom,(void**)&sp_select,(void**)&sp_send,(void**)&sp_sendto,(void**)&sp_bind,(void**)&sp_setsockopt,(void**)&sp_shutdown,(void**)&sp_socket,(void**)&sp_gethostbyname,(void**)&sp_gethostname,(void**)&sp_WSAGetLastError,(void**)&sp_WSAStartup,(void**)&sp_WSACleanup,(void**)&sp___WSAFDIsSet};
					// char ac_funcs[24][32] = {"bind","connect","getsockname","htonl","htons","inet_addr","inet_ntoa","ntohl","ntohs","recv","recvfrom","select","send","sendto","bind","setsockopt","shutdown","socket","gethostbyname","gethostname","WSAGetLastError","WSAStartup","WSACleanup","__WSAFDIsSet"};
					// void **pv_funcs[24] = {(void**)&sp_bind,(void**)&sp_connect,(void**)&sp_getsockname,(void**)&sp_htonl,(void**)&sp_htons,(void**)&sp_inet_addr,(void**)&sp_inet_ntoa,(void**)&sp_ntohl,(void**)&sp_ntohs,(void**)&sp_recv,(void**)&sp_recvfrom,(void**)&sp_select,(void**)&sp_send,(void**)&sp_sendto,(void**)&sp_bind,(void**)&sp_setsockopt,(void**)&sp_shutdown,(void**)&sp_socket,(void**)&sp_gethostbyname,(void**)&sp_gethostname,(void**)&sp_WSAGetLastError,(void**)&sp_WSAStartup,(void**)&sp_WSACleanup,(void**)&sp___WSAFDIsSet};
					for ( int i = 0; i < 24; i++ ) {

						if ( SoFplusLoadFn(o_sofplus,pv_funcs[i],ac_funcs[i]) == false ) {
							#ifdef SOFREE_DEBUG
							fprintf(stdout, "ERROR: Couldn't Load a sofplus wsock function : %s\n", ac_funcs[i]);
							#endif
							b_sofplus = false;
						}	
					}
					// sp_closesocket = &closesocket;
					// sp_ioctlsocket = &ioctlsocket;

					fprintf(stdout,"SoF plus after\n");
					if ( b_sofplus == false ){
						#ifdef SOFREE_DEBUG
						fprintf(stdout, "ERROR: Couldn't Load a sofplus function\n");
						#endif
						return FALSE;
					}
					
				} else{
					#ifdef SOFREE_DEBUG
					fprintf(stdout, "ERROR: LoadLibrary failed sofplus\n");
					#endif
					return FALSE;
				}
			} else{
				#ifdef SOFREE_DEBUG
				fprintf(stdout, "ERROR: Sofplus not found\n");
				#endif
				return FALSE;
			}
			#ifdef SOFREE_DEBUG
			fprintf(stdout, "DEBUG: Loaded.\n");
			#endif
			init=true;
		}
	}
	return TRUE;
}
#endif
bool SoFplusLoadFn(HMODULE sofplus,void ** out_fn,char * func)
{
	
	*out_fn = (void*)GetProcAddress(sofplus,func);
	if (*out_fn == NULL) {
		fprintf(stdout,"GetProcAddress failed\n");
		return false;
	}
	fprintf(stdout,"GetProcAddress succeeded\n");

	return true;
}